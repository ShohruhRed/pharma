"""Добавлен stage_idx

Revision ID: ab2e5a0b07ac
Revises: af6924a3f181
Create Date: 2025-05-11 00:54:07.785025

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'ab2e5a0b07ac'
down_revision: Union[str, None] = 'af6924a3f181'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    op.add_column("stage_sensor_data", sa.Column("stage_idx", sa.Integer()))
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('stages',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('stages_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('batch_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('start_time', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('end_time', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['batch_id'], ['batches.id'], name='stages_batch_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='stages_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index('ix_stages_id', 'stages', ['id'], unique=False)
    op.create_table('stage_sensor_data',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('stage_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('timestamp', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('temperature', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('pressure', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('humidity', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('composition', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['stage_id'], ['stages.id'], name='stage_sensor_data_stage_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='stage_sensor_data_pkey')
    )
    op.create_index('ix_stage_sensor_data_id', 'stage_sensor_data', ['id'], unique=False)
    op.create_table('stage_predictions',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('stage_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('timestamp', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('defect_prob', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('recommendation', sa.TEXT(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['stage_id'], ['stages.id'], name='stage_predictions_stage_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='stage_predictions_pkey')
    )
    op.create_index('ix_stage_predictions_id', 'stage_predictions', ['id'], unique=False)
    op.create_table('predictions',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('timestamp', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('temperature', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('pressure', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('humidity', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('NaCl', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('KCl', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('defect_probability', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('risk_level', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('recommendation', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('source_model', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('rule_used', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('stage_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['stage_id'], ['stages.id'], name='fk_predictions_stage_id_stages', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='predictions_pkey')
    )
    op.create_index('ix_predictions_id', 'predictions', ['id'], unique=False)
    op.create_table('batches',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('start_time', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('end_time', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('status', sa.TEXT(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='batches_pkey')
    )
    op.create_index('ix_batches_id', 'batches', ['id'], unique=False)
    # ### end Alembic commands ###
