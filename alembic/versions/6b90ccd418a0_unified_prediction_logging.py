"""unified prediction logging

Revision ID: 6b90ccd418a0
Revises: fc1fdf8a0078
Create Date: 2025-04-13 16:53:33.911526

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '6b90ccd418a0'
down_revision: Union[str, None] = 'fc1fdf8a0078'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('predictions',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('timestamp', sa.TIMESTAMP(), nullable=False),
    sa.Column('temperature', sa.Float(), nullable=True),
    sa.Column('pressure', sa.Float(), nullable=True),
    sa.Column('humidity', sa.Float(), nullable=True),
    sa.Column('NaCl', sa.Float(), nullable=True),
    sa.Column('KCl', sa.Float(), nullable=True),
    sa.Column('defect_probability', sa.Float(), nullable=True),
    sa.Column('risk_level', sa.String(), nullable=True),
    sa.Column('recommendation', sa.String(), nullable=True),
    sa.Column('source_model', sa.String(), nullable=True),
    sa.Column('rule_used', sa.String(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_predictions_id'), 'predictions', ['id'], unique=False)
    op.drop_index('ix_ml_predictions_id', table_name='ml_predictions')
    op.drop_table('ml_predictions')
    op.drop_index('ix_sanfis_predictions_id', table_name='sanfis_predictions')
    op.drop_table('sanfis_predictions')
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('sanfis_predictions',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('timestamp', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('temperature', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('pressure', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('humidity', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('NaCl', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('KCl', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('defect_probability', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('risk_level', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('recommendation', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('rule_used', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='sanfis_predictions_pkey')
    )
    op.create_index('ix_sanfis_predictions_id', 'sanfis_predictions', ['id'], unique=False)
    op.create_table('ml_predictions',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('timestamp', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('temperature', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('pressure', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('humidity', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('NaCl', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('KCl', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('defect_probability', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('risk_level', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('recommendation', sa.TEXT(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='ml_predictions_pkey')
    )
    op.create_index('ix_ml_predictions_id', 'ml_predictions', ['id'], unique=False)
    op.drop_index(op.f('ix_predictions_id'), table_name='predictions')
    op.drop_table('predictions')
    # ### end Alembic commands ###
